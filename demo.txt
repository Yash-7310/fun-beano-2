"use client";

import React, { useState, useEffect } from 'react';
import { CalendarDays, UserRound, CreditCard, MapPin, Star } from 'lucide-react';

// Main component for the booking page
export default function BookingPage() {
    // State management for all form inputs and selections
    const [selectedDate, setSelectedDate] = useState('');
    const [selectedTime, setSelectedTime] = useState('');
    const [childrenCount, setChildrenCount] = useState(1);
    const [contactInfo, setContactInfo] = useState({
        fullName: '',
        phone: '',
        email: '',
        specialRequests: ''
    });
    const [paymentMethod, setPaymentMethod] = useState('online');
    const [totalAmount, setTotalAmount] = useState(0);
    const [isFormValid, setIsFormValid] = useState(false);

    const timeSlots = [
        '10:00 AM', '11:00 AM', '12:00 PM', '1:00 PM', '2:00 PM', '3:00 PM',
        '4:00 PM', '5:00 PM', '6:00 PM', '7:00 PM'
    ];

    const entryFeePerChild = 599;
    const convenienceFee = 30;

    // Effect to recalculate total price when dependencies change
    useEffect(() => {
        const baseEntryFee = entryFeePerChild * childrenCount;
        let discount = 0;
        if (paymentMethod === 'online') {
            discount = baseEntryFee * 0.05;
        }
        const finalAmount = baseEntryFee - discount + convenienceFee;
        setTotalAmount(finalAmount);
    }, [childrenCount, paymentMethod]);

    // Effect to validate the form whenever required fields change
    useEffect(() => {
        const { fullName, phone, email } = contactInfo;
        const isValid = selectedDate && selectedTime && fullName && phone && email;
        setIsFormValid(!!isValid);
    }, [selectedDate, selectedTime, contactInfo]);

    // Handler for form input changes
    const handleContactChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { id, value } = e.target;
        setContactInfo(prev => ({ ...prev, [id]: value }));
    };
    
    // Handler for form submission
    const handleBookingSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        if(isFormValid) {
            alert('Booking Confirmed! (Simulation)');
            // Here you would typically send the data to your backend
            console.log({
                date: selectedDate,
                time: selectedTime,
                children: childrenCount,
                contact: contactInfo,
                payment: paymentMethod,
                total: totalAmount,
            });
        }
    }

    const baseEntryFee = entryFeePerChild * childrenCount;
    const discount = paymentMethod === 'online' ? baseEntryFee * 0.05 : 0;

    return (
        <div className="bg-gray-50 min-h-screen">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
                <header className="mb-8">
                    <h1 className="text-3xl font-bold text-gray-900">Complete Your Booking</h1>
                    <p className="text-gray-600 mt-1">Secure your spot at Kidz Adventure Park</p>
                </header>

                <form onSubmit={handleBookingSubmit} className="grid lg:grid-cols-3 gap-12">
                    {/* Left Column: Booking Form */}
                    <div className="lg:col-span-2 space-y-8">
                        {/* Date & Time Selection */}
                        <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                            <h2 className="text-xl font-semibold mb-4 flex items-center">
                                <CalendarDays className="mr-2 text-gray-500" />
                                Select Date & Time
                            </h2>
                            <div className="space-y-6">
                                <div>
                                    <label htmlFor="booking-date" className="block text-sm font-medium text-gray-700 mb-1">Choose Date</label>
                                    <input type="date" id="booking-date" className="w-full p-3 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" value={selectedDate} onChange={(e) => setSelectedDate(e.target.value)} min={new Date().toISOString().split('T')[0]}/>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">Choose Time Slot</label>
                                    <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                                        {timeSlots.map(time => (
                                            <button key={time} type="button" onClick={() => setSelectedTime(time)} className={`py-2 px-4 rounded-lg text-sm font-medium border transition-all ${selectedTime === time ? 'bg-blue-800 text-white border-blue-800' : 'hover:bg-gray-100 hover:border-gray-400'}`}>
                                                {time}
                                            </button>
                                        ))}
                                    </div>
                                </div>
                                <div>
                                    <label htmlFor="children-count" className="block text-sm font-medium text-gray-700 mb-1">Number of Children</label>
                                    <select id="children-count" className="w-full p-3 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" value={childrenCount} onChange={(e) => setChildrenCount(Number(e.target.value))}>
                                        {[1, 2, 3, 4, 5].map(num => (
                                            <option key={num} value={num}>{num} Child{num > 1 ? 'ren' : ''}</option>
                                        ))}
                                    </select>
                                </div>
                            </div>
                        </div>

                        {/* Contact Information */}
                        <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                            <h2 className="text-xl font-semibold mb-4 flex items-center">
                                <UserRound className="mr-2 text-gray-500" />
                                Contact Information
                            </h2>
                            <div className="grid sm:grid-cols-2 gap-6">
                                <div>
                                    <label htmlFor="fullName" className="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                                    <input type="text" id="fullName" placeholder="Enter your name" className="w-full p-3 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" value={contactInfo.fullName} onChange={handleContactChange} />
                                </div>
                                <div>
                                    <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
                                    <input type="tel" id="phone" placeholder="Enter phone number" className="w-full p-3 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" value={contactInfo.phone} onChange={handleContactChange} />
                                </div>
                                <div className="sm:col-span-2">
                                    <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                                    <input type="email" id="email" placeholder="Enter email address" className="w-full p-3 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" value={contactInfo.email} onChange={handleContactChange} />
                                </div>
                                <div className="sm:col-span-2">
                                    <label htmlFor="specialRequests" className="block text-sm font-medium text-gray-700 mb-1">Special Requests (Optional)</label>
                                    <textarea id="specialRequests" rows={3} placeholder="Any special requirements or birthday party needs..." className="w-full p-3 border border-gray-300 rounded-lg focus:ring-amber-500 focus:border-amber-500" value={contactInfo.specialRequests} onChange={handleContactChange}></textarea>
                                </div>
                            </div>
                        </div>
                        
                        {/* Payment Information */}
                        <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                            <h2 className="text-xl font-semibold mb-4 flex items-center">
                                <CreditCard className="mr-2 text-gray-500" />
                                Payment Information
                            </h2>
                            <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded-md mb-6">
                                <p className="text-sm text-yellow-800">Payment will be processed securely. You can pay online or at the venue.</p>
                            </div>
                            <div className="space-y-4">
                                <label className={`flex items-center p-4 border rounded-lg cursor-pointer transition-all ${paymentMethod === 'online' ? 'bg-blue-50 border-blue-500' : ''}`}>
                                    <input type="radio" name="payment-method" value="online" className="h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500" checked={paymentMethod === 'online'} onChange={(e) => setPaymentMethod(e.target.value)} />
                                    <span className="ml-3 text-sm font-medium text-gray-800">Pay Online (Get 5% discount)</span>
                                </label>
                                <label className={`flex items-center p-4 border rounded-lg cursor-pointer transition-all ${paymentMethod === 'venue' ? 'bg-blue-50 border-blue-500' : ''}`}>
                                    <input type="radio" name="payment-method" value="venue" className="h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500" checked={paymentMethod === 'venue'} onChange={(e) => setPaymentMethod(e.target.value)} />
                                    <span className="ml-3 text-sm font-medium text-gray-800">Pay at Venue</span>
                                </label>
                            </div>
                        </div>
                    </div>

                    {/* Right Column: Booking Summary */}
                    <div className="lg:col-span-1">
                        <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200 sticky top-12">
                            <h2 className="text-xl font-semibold mb-4 border-b pb-4">Booking Summary</h2>
                            
                            <div className="flex items-center space-x-4 mb-6">
                                <img src="https://placehold.co/64x64/a7f3d0/1f2937?text=Park" alt="Kidz Adventure Park" className="w-16 h-16 rounded-lg object-cover" />
                                <div>
                                    <h3 className="font-semibold text-gray-800">Kidz Adventure Park</h3>
                                    <p className="text-sm text-gray-500 flex items-center"><MapPin className="w-4 h-4 mr-1" /> Connaught Place, Delhi</p>
                                    <p className="text-sm text-gray-500 flex items-center mt-1"><Star className="w-4 h-4 mr-1 text-yellow-400 fill-current" /> 4.8</p>
                                </div>
                            </div>

                            <div className="space-y-3 text-sm mb-6">
                                <div className="flex justify-between">
                                    <span className="text-gray-600">Date:</span>
                                    <span className="font-medium text-gray-800">{selectedDate ? new Date(selectedDate).toLocaleDateString('en-IN', { day: 'numeric', month: 'long', year: 'numeric' }) : 'Not selected'}</span>
                                </div>
                                <div className="flex justify-between">
                                    <span className="text-gray-600">Time:</span>
                                    <span className="font-medium text-gray-800">{selectedTime || 'Not selected'}</span>
                                </div>
                                <div className="flex justify-between">
                                    <span className="text-gray-600">Children:</span>
                                    <span className="font-medium text-gray-800">{childrenCount}</span>
                                </div>
                            </div>
                            
                            <div className="mb-6">
                                <h4 className="font-semibold text-sm mb-2 text-gray-800">Included Features</h4>
                                <div className="flex flex-wrap gap-2">
                                    <span className="bg-red-100 text-red-800 text-xs font-medium px-2.5 py-1 rounded-full">Indoor Play</span>
                                    <span className="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-1 rounded-full">Birthday Parties</span>
                                    <span className="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-1 rounded-full">Café</span>
                                </div>
                            </div>

                            <div className="space-y-2 border-t pt-4">
                                <div className="flex justify-between text-sm">
                                    <span className="text-gray-600">Entry fee ({childrenCount} {childrenCount > 1 ? 'children' : 'child'})</span>
                                    <span className="font-medium text-gray-800">₹{baseEntryFee.toFixed(2)}</span>
                                </div>
                                {paymentMethod === 'online' && (
                                    <div className="flex justify-between text-sm text-green-600">
                                        <span>Online Discount (5%)</span>
                                        <span className="font-medium">- ₹{discount.toFixed(2)}</span>
                                    </div>
                                )}
                                <div className="flex justify-between text-sm">
                                    <span className="text-gray-600">Convenience fee</span>
                                    <span className="font-medium text-gray-800">₹{convenienceFee.toFixed(2)}</span>
                                </div>
                                <div className="flex justify-between font-bold text-lg border-t pt-2 mt-2">
                                    <span>Total Amount</span>
                                    <span>₹{totalAmount.toFixed(2)}</span>
                                </div>
                            </div>
                            
                            <div className="bg-green-50 text-green-700 text-xs text-center p-3 rounded-lg mt-6">
                                Free cancellation up to 24 hours before your visit
                            </div>

                            <button type="submit" disabled={!isFormValid} className="w-full bg-yellow-400 hover:bg-yellow-500 text-yellow-900 font-bold py-3 px-4 rounded-lg mt-6 transition-all disabled:bg-gray-300 disabled:cursor-not-allowed">
                                Confirm Booking - <span>₹{totalAmount.toFixed(2)}</span>
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    );
}
